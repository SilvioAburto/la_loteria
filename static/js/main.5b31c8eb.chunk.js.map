{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","Audio","images","id","name","src","i","setTimeout","play","console","log","img_src","document","getElementById","className","length","class","onClick","display_photo","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uOA2FeA,G,kBApFb,aAAe,uE,6EAQK,IAAIC,MAAM,iBAKX,IAAIA,MAAM,gBAKN,IAAIA,MAAM,oBAuC/B,IAjDA,IAcMC,EAAS,CACb,CACEC,GAAI,EACJC,KAAM,WACNC,IAAK,YAEP,CACEF,GAAI,EACJC,KAAM,cACNC,IAAK,eAEP,CACEF,GAAI,EACJC,KAAM,UACNC,IAAK,WAEP,CACEF,GAAI,EACJC,KAAM,YACNC,IAAK,aAEP,CACEF,GAAI,EACJC,KAAM,cACNC,IAAK,eAEP,CACEF,GAAI,EACJC,KAAM,YACNC,IAAK,cA7CI,WAmDLC,GACNC,YAAW,WACQ,IAAIN,MAAM,IAAIC,EAAOI,GAAGD,IAAM,QACpCG,OACXC,QAAQC,IAAIR,EAAOI,GAAGD,KACtB,IAAMM,EAAUT,EAAOI,GAAGD,IAC1BO,SAASC,eAAT,UAAkCC,UAChCH,IACD,IAAKL,IARFA,EAAI,EAAGA,EAAIJ,EAAOa,OAAQT,IAAO,EAAjCA,K,+BAaD,IAAD,OAGE,OACE,yBAAKQ,UAAU,OACb,yBAAKE,MAAM,SAAX,cACA,yBAAKb,GAAK,SAASW,UAAY,cAC/B,4BAASE,MAAM,eAAeC,QAAS,kBAAM,EAAKC,kBAAlD,c,GA/EEC,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASd,SAASC,eAAe,SD6H3C,kBAAmBc,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.5b31c8eb.chunk.js","sourcesContent":["\nimport React, { Component } from 'react';\nimport './App.css';\n\n\nclass App extends Component {\n \n  constructor() {\n    super();\n\n\n}\n\n  display_photo(){\n\n    let audio_gallo = new Audio(\"/el_gallo.mp3\")\n    const start_gallo = () => {\n      audio_gallo.play()\n    }\n\n    let audio_dama = new Audio(\"/la_dama.mp3\")\n    const start_dama = () => {\n      audio_dama.play()\n    }\n\n    let audio_diablito = new Audio(\"/el_diablito.mp3\")\n    const start_diablito = () => {\n      audio_diablito.play()\n    }\n    const images = [\n      {\n        id: 1,\n        name: \"El Gallo\",\n        src: \"el_gallo\"\n      },\n      {\n        id: 2,\n        name: \"El Diablito\",\n        src: \"el_diablito\"\n      },\n      {\n        id: 3,\n        name: \"La Dama\",\n        src: \"la_dama\"\n      },\n      {\n        id: 4,\n        name: \"El Catrin\",\n        src: \"el_catrin\"\n      },\n      {\n        id: 5,\n        name: \"El Paraguas\",\n        src: \"el_paraguas\"\n      },\n      {\n        id: 6,\n        name: \"La Sirena\",\n        src: \"la_sirena\"\n      },\n\n\n    ];\n  \n    for(let i = 0; i < images.length; i++ ) {\n      setTimeout(() => {\n        let card_audio = new Audio(\"/\"+images[i].src + \".mp3\")\n        card_audio.play();\n        console.log(images[i].src)\n        const img_src = images[i].src\n        document.getElementById(`img_id`).className =\n          img_src;\n      }, 3000*i);\n    }\n  }\n\n\n  render(){\n\n\n            return (\n              <div className=\"App\">\n                <div class=\"title\">La Loteria</div>\n                <div id = \"img_id\" className = \"img_class\"></div>\n                <button  class=\"start_button\" onClick={() => this.display_photo()}>Start</button>\n  \n              </div>\n            );\n          }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}