{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","secondsElapsed","isActive","images","id","name","src","card_index","this","Math","round","slice","length","_this","console","log","array","temporaryValue","randomIndex","currentIndex","floor","random","shuffle","countdown","setInterval","card_audio","Audio","load","play","document","querySelector","getElementById","style","backgroundImage","setState","clearInterval","className","getCardIndex","imageLength","onClick","change_card","pauseTime","resetCards","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mPA8JeA,E,YAnIb,aAAe,IAAD,8BACZ,+CACKC,MAAQ,CACXC,eAAgB,EAChBC,UAAU,EACVC,OAAQ,CACN,CACEC,GAAI,EACJC,KAAM,WACNC,IAAK,YAEP,CACEF,GAAI,EACJC,KAAM,cACNC,IAAK,eAEP,CACEF,GAAI,EACJC,KAAM,UACNC,IAAK,WAEP,CACEF,GAAI,EACJC,KAAM,YACNC,IAAK,aAEP,CACEF,GAAI,EACJC,KAAM,cACNC,IAAK,eAEP,CACEF,GAAI,EACJC,KAAM,YACNC,IAAK,cAGTC,WAAY,GArCF,E,4EA0CZ,OAAOC,KAAKR,MAAMO,a,iCAGlB,OAAQ,IAAME,KAAKC,MAAMF,KAAKR,MAAMC,eAAiB,OAAOU,OAAO,K,mCAInE,OAAQ,IAAMF,KAAKC,MAAOF,KAAKR,MAAMC,eAAiB,KAAQ,KAAKU,OAAO,K,mCAI1E,OAAQ,IAAOH,KAAKR,MAAMC,eAAiB,IAAKU,OAAO,K,oCAIvD,OAAOH,KAAKR,MAAMG,OAAOS,S,oCAGzB,IAAIC,EAAQL,KACTK,EAAMb,MAAMO,YAAcM,EAAMb,MAAMG,OAAOS,OAC9CE,QAAQC,IAAI,6BAIdF,EAAMb,MAAMG,OAvFhB,SAAiBa,GAIf,IAHA,IAAiCC,EAAgBC,EAA7CC,EAAeH,EAAMJ,OAGlB,IAAMO,GAGXD,EAAcT,KAAKW,MAAMX,KAAKY,SAAWF,GAIzCF,EAAiBD,EAHjBG,GAAgB,GAIhBH,EAAMG,GAAgBH,EAAME,GAC5BF,EAAME,GAAeD,EAGvB,OAAOD,EAuEgBM,CAAQT,EAAMb,MAAMG,QACzCU,EAAMU,UAAYC,aAAY,WAG5BV,QAAQC,IAAIF,EAAMb,MAAMO,YACxBO,QAAQC,IAAIF,EAAMb,MAAMG,OAAOS,QAE/B,IAAMa,EAAa,IAAIC,MACvBD,EAAWE,OACXF,EAAWG,OACXH,EAAWnB,IAAM,eAAeO,EAAMb,MAAMG,OAAOU,EAAMb,MAAMO,YAAYD,IAAM,OACjFmB,EAAWG,OAGCC,SAASC,cAAT,UAKZD,SAASE,eAAT,UAAkCC,MAAMC,gBAAkB,oBAAsBpB,EAAMb,MAAMG,OAAOU,EAAMb,MAAMO,YAAYD,IAAK,SAChIO,EAAMqB,SAAS,CAAE3B,WAAWM,EAAMb,MAAMO,WAAa,IAGlDM,EAAMb,MAAMO,YAAcM,EAAMb,MAAMG,OAAOS,SAC9CE,QAAQC,IAAI,QACZoB,cAActB,EAAMU,cAEtB,Q,mCAMFf,KAAK0B,SAAS,CACZjC,eAAiBO,KAAKR,MAAMO,WAAa,IAE3C4B,cAAc3B,KAAKe,WACnBM,SAASE,eAAT,UAAkCC,MAAMC,gBAAkB,yC,kCAK1DE,cAAc3B,KAAKe,a,+BAKZ,IAAD,OACE,OACE,yBAAKa,UAAU,OACb,yBAAKA,UAAU,SAAf,cACA,4BACG5B,KAAK6B,eADR,IACyB7B,KAAK8B,eAE9B,yBAAKlC,GAAK,SAASgC,UAAY,cAC/B,yBAAKA,UAAY,gBACf,4BAASA,UAAU,eAAeG,QAAS,kBAAM,EAAKC,gBAAtD,SACA,4BAASJ,UAAU,eAAeG,QAAS,kBAAM,EAAKE,cAAtD,SACA,4BAASL,UAAU,eAAeG,QAAS,kBAAM,EAAKG,eAAtD,e,GA9HAC,aCbEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASrB,SAASE,eAAe,SD6H3C,kBAAmBoB,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.98477343.chunk.js","sourcesContent":["\r\nimport React, { Component } from 'react';\r\nimport './App.css';\r\n\r\n\r\n\r\nfunction shuffle(array) {\r\n  var currentIndex = array.length, temporaryValue, randomIndex;\r\n\r\n  // While there remain elements to shuffle...\r\n  while (0 !== currentIndex) {\r\n\r\n    // Pick a remaining element...\r\n    randomIndex = Math.floor(Math.random() * currentIndex);\r\n    currentIndex -= 1;\r\n\r\n    // And swap it with the current element.\r\n    temporaryValue = array[currentIndex];\r\n    array[currentIndex] = array[randomIndex];\r\n    array[randomIndex] = temporaryValue;\r\n  }\r\n\r\n  return array;\r\n}\r\n\r\nclass App extends Component {\r\n \r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      secondsElapsed: 0, //time in seconds\r\n      isActive: false,\r\n      images :[\r\n        {\r\n          id: 1,\r\n          name: \"El Gallo\",\r\n          src: \"el_gallo\"\r\n        },\r\n        {\r\n          id: 2,\r\n          name: \"El Diablito\",\r\n          src: \"el_diablito\"\r\n        },\r\n        {\r\n          id: 3,\r\n          name: \"La Dama\",\r\n          src: \"la_dama\"\r\n        },\r\n        {\r\n          id: 4,\r\n          name: \"El Catrin\",\r\n          src: \"el_catrin\"\r\n        },\r\n        {\r\n          id: 5,\r\n          name: \"El Paraguas\",\r\n          src: \"el_paraguas\"\r\n        },\r\n        {\r\n          id: 6,\r\n          name: \"La Sirena\",\r\n          src: \"la_sirena\"\r\n        }\r\n      ],\r\n      card_index: 0\r\n    };\r\n}\r\n\r\n  getCardIndex(){\r\n    return(this.state.card_index)\r\n  }\r\n  getHours() {\r\n    return (\"0\" + Math.round(this.state.secondsElapsed / 3600)).slice(-2);\r\n  }\r\n\r\n  getMinutes() {\r\n    return (\"0\" + Math.round((this.state.secondsElapsed % 3600) / 60)).slice(-2);\r\n  }\r\n\r\n  getSeconds() {\r\n    return (\"0\" + (this.state.secondsElapsed % 60)).slice(-2);\r\n  }\r\n\r\n  imageLength(){\r\n    return(this.state.images.length)\r\n  }\r\n  change_card(){\r\n    var _this = this\r\n    if(_this.state.card_index >= _this.state.images.length){\r\n      console.log(\"All cards have been used\")\r\n    } else{\r\n \r\n\r\n    _this.state.images = shuffle(_this.state.images)\r\n    _this.countdown = setInterval(function(){\r\n      //alert(\"Hello Silvio\");\r\n      //console.log(this.card_index);\r\n      console.log(_this.state.card_index)\r\n      console.log(_this.state.images.length)\r\n\r\n      const card_audio = new Audio()\r\n      card_audio.load()\r\n      card_audio.play();\r\n      card_audio.src = \"/la_loteria/\"+_this.state.images[_this.state.card_index].src + \".mp3\"\r\n      card_audio.play();\r\n      //let card_audio = new Audio(\"/la_loteria/\"+_this.state.images[_this.state.card_index].src + \".mp3\");\r\n      //card_audio.play();\r\n      const div = document.querySelector(`img_id`);\r\n      //const img_src = images[this.card_index].src\r\n      //To change class\r\n      //document.getElementById(`img_id`).className = \r\n      // img_src;\r\n      document.getElementById(`img_id`).style.backgroundImage = \"url('/la_loteria/\" + _this.state.images[_this.state.card_index].src +\".jpg')\"\r\n      _this.setState({ card_index:_this.state.card_index + 1})\r\n      //_this.state.card_index = _this.state.card_index + 1\r\n      //this.card_index = _this.state.card_index + 1\r\n      if(_this.state.card_index >= _this.state.images.length){\r\n        console.log(\"True\")\r\n        clearInterval(_this.countdown);\r\n      }\r\n    },3000)\r\n  }\r\n\r\n  } \r\n\r\n  resetCards() {\r\n    this.setState({\r\n      secondsElapsed: (this.state.card_index = 0)\r\n    });\r\n    clearInterval(this.countdown);\r\n    document.getElementById(`img_id`).style.backgroundImage = \"url('/la_loteria/loteria_cover.jpg')\"\r\n\r\n  }\r\n\r\n  pauseTime() {\r\n    clearInterval(this.countdown);\r\n  }\r\n\r\n\r\n\r\n  render(){\r\n            return (\r\n              <div className=\"App\">\r\n                <div className=\"title\">La Loteria</div>\r\n                <h2>\r\n                  {this.getCardIndex()}/{this.imageLength()}\r\n                </h2>\r\n                <div id = \"img_id\" className = \"img_class\"></div>\r\n                <div className = \"cards_footer\">\r\n                  <button  className=\"start_button\" onClick={() => this.change_card()}>START</button>\r\n                  <button  className=\"pause_button\" onClick={() => this.pauseTime()}>PAUSE</button>\r\n                  <button  className=\"reset_button\" onClick={() => this.resetCards()}>RESET</button>\r\n                </div>\r\n              </div>\r\n            );\r\n          }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}