{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","secondsElapsed","isActive","images","id","name","src","card_index","music","Audio","chime","nothing","allAudio","push","tapped","audio","play","pause","currentTime","setTimeout","document","body","addEventListener","then","catch","loop","Math","random","this","round","slice","length","_this","console","log","array","temporaryValue","randomIndex","currentIndex","floor","shuffle","countdown","setInterval","card_audio","AllAudio","querySelector","getElementById","style","backgroundImage","setState","clearInterval","className","onClick","render_sound","getCardIndex","imageLength","change_card","pauseTime","resetCards","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.799a469f.chunk.js","sourcesContent":["\r\nimport React, { Component } from 'react';\r\nimport './App.css';\r\n\r\n\r\n\r\nfunction shuffle(array) {\r\n  var currentIndex = array.length, temporaryValue, randomIndex;\r\n\r\n  // While there remain elements to shuffle...\r\n  while (0 !== currentIndex) {\r\n\r\n    // Pick a remaining element...\r\n    randomIndex = Math.floor(Math.random() * currentIndex);\r\n    currentIndex -= 1;\r\n\r\n    // And swap it with the current element.\r\n    temporaryValue = array[currentIndex];\r\n    array[currentIndex] = array[randomIndex];\r\n    array[randomIndex] = temporaryValue;\r\n  }\r\n\r\n  return array;\r\n}\r\n\r\nclass App extends Component {\r\n \r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      secondsElapsed: 0, //time in seconds\r\n      isActive: false,\r\n      images :[\r\n        {\r\n          id: 1,\r\n          name: \"El Gallo\",\r\n          src: \"el_gallo\"\r\n        },\r\n        {\r\n          id: 2,\r\n          name: \"El Diablito\",\r\n          src: \"el_diablito\"\r\n        },\r\n        {\r\n          id: 3,\r\n          name: \"La Dama\",\r\n          src: \"la_dama\"\r\n        },\r\n        {\r\n          id: 4,\r\n          name: \"El Catrin\",\r\n          src: \"el_catrin\"\r\n        },\r\n        {\r\n          id: 5,\r\n          name: \"El Paraguas\",\r\n          src: \"el_paraguas\"\r\n        },\r\n        {\r\n          id: 6,\r\n          name: \"La Sirena\",\r\n          src: \"la_sirena\"\r\n        }\r\n      ],\r\n      card_index: 0\r\n    };\r\n}\r\n\r\nrender_sound(){\r\nvar music = new Audio(\"https://silvioaburto.github.io/la_loteria/la_sirena.mp3\")\r\n\r\nvar chime = new Audio(\"http://curtastic.com/gold.wav\")\r\n\r\nvar nothing = new Audio(\"http://touchbasicapp.com/nothing.wav\")\r\n\r\nvar allAudio = []\r\n\r\nallAudio.push(music)\r\n\r\nallAudio.push(chime)\r\n\r\n\r\n\r\nvar tapped = function() {\r\n\r\n\r\n// Play all audio files on the first tap and stop them immediately.\r\n\r\nif(allAudio) {\r\n\r\nfor(var audio of allAudio) {\r\n\r\n  audio.play()\r\n\r\n  audio.pause()\r\n\r\n  audio.currentTime = 0\r\n\r\n}\r\n\r\nallAudio = null\r\n\r\n}\r\n\r\n\r\n\r\n// We should be able to play music delayed now (not during the tap event).\r\n\r\n//messagediv.innerHTML = \"Music starts in 2 seconds...\"\r\n\r\nsetTimeout(function() {\r\n\r\n//messagediv.innerHTML = \"Music playing. <button onclick='stop()'>Stop</button>\"\r\n\r\nmusic.play()\r\n\r\n}, 2000)\r\n\r\n\r\n\r\n}\r\n\r\ndocument.body.addEventListener('touchstart', tapped, false)\r\n\r\ndocument.body.addEventListener('click', tapped, false)\r\n\r\n\r\n\r\nvar stop = function() {\r\n\r\nmusic.pause()\r\n\r\nloop = null\r\n\r\ndocument.body.removeEventListener('touchstart', tapped, false)\r\n\r\ndocument.body.removeEventListener('click', tapped, false)\r\n\r\n}\r\n\r\n\r\n\r\n// Check if audio starts already unlocked by playing a blank wav.\r\n\r\nnothing.play().then(function() {\r\n\r\n//lockeddiv.innerHTML = \"Audio started unlocked!\"\r\n\r\n}).catch(function(){\r\n\r\n//lockeddiv.innerHTML = \"Audio started locked :(\"\r\n\r\n})\r\n\r\n\r\n\r\nvar loop = function() {\r\n\r\n// Try to play chimes whenever we want (not during user action).\r\nif(Math.random() < .01) {\r\n\r\nchime.play().then(function(){\r\n\r\n//\tlockeddiv.innerHTML = \"Audio is now unlocked!\"\r\n\r\n})\r\n\r\n}\r\n\r\nsetTimeout(loop, 16)\r\n\r\n}\r\n\r\n  loop()\r\n}\r\n\r\n\r\n  getCardIndex(){\r\n    return(this.state.card_index)\r\n  }\r\n  getHours() {\r\n    return (\"0\" + Math.round(this.state.secondsElapsed / 3600)).slice(-2);\r\n  }\r\n\r\n  getMinutes() {\r\n    return (\"0\" + Math.round((this.state.secondsElapsed % 3600) / 60)).slice(-2);\r\n  }\r\n\r\n  getSeconds() {\r\n    return (\"0\" + (this.state.secondsElapsed % 60)).slice(-2);\r\n  }\r\n\r\n  imageLength(){\r\n    return(this.state.images.length)\r\n  }\r\n  change_card(){\r\n    var _this = this\r\n    if(_this.state.card_index >= _this.state.images.length){\r\n      console.log(\"All cards have been used\")\r\n    } else{\r\n \r\n\r\n    _this.state.images = shuffle(_this.state.images)\r\n    _this.countdown = setInterval(function(){\r\n      //alert(\"Hello Silvio\");\r\n      //console.log(this.card_index);\r\n      console.log(_this.state.card_index)\r\n      console.log(_this.state.images.length)\r\n\r\n      //const card_audio = new Audio()\r\n      //card_audio.play();\r\n      //card_audio.src = \"la_loteria/\"+_this.state.images[_this.state.card_index].src + \".mp3\";\r\n      //card_audio.load();\r\n      //card_audio.play();\r\n      var card_audio = new Audio(\"http://curtastic.com/nightmare.mp3\")\r\n      //var card_audio = new Audio(\"/la_loteria/\"+_this.state.images[_this.state.card_index].src + \".mp3\")\r\n      var AllAudio = []\r\n      AllAudio.push(card_audio)\r\n      card_audio.play()\r\n      card_audio.pause()\r\n      card_audio.currentTime = 0\r\n      AllAudio = null\r\n      card_audio.play();\r\n      const div = document.querySelector(`img_id`);\r\n      //const img_src = images[this.card_index].src\r\n      //To change class\r\n      //document.getElementById(`img_id`).className = \r\n      // img_src;\r\n      document.getElementById(`img_id`).style.backgroundImage = \"url('/la_loteria/\" + _this.state.images[_this.state.card_index].src +\".jpg')\"\r\n      _this.setState({ card_index:_this.state.card_index + 1})\r\n      //_this.state.card_index = _this.state.card_index + 1\r\n      //this.card_index = _this.state.card_index + 1\r\n      if(_this.state.card_index >= _this.state.images.length){\r\n        console.log(\"True\")\r\n        clearInterval(_this.countdown);\r\n      }\r\n    },3000)\r\n  }\r\n\r\n  } \r\n\r\n  resetCards() {\r\n    this.setState({\r\n      secondsElapsed: (this.state.card_index = 0)\r\n    });\r\n    clearInterval(this.countdown);\r\n    document.getElementById(`img_id`).style.backgroundImage = \"url('/la_loteria/loteria_cover.jpg')\"\r\n\r\n  }\r\n\r\n  pauseTime() {\r\n    clearInterval(this.countdown);\r\n  }\r\n\r\n\r\n\r\n  render(){\r\n            return (\r\n              <div className=\"App\">\r\n                <div className=\"title\">La Loteria</div>\r\n                <button  className=\"play_button\" onClick={() => this.render_sound()}>Play</button>\r\n                <h2>\r\n                  {this.getCardIndex()}/{this.imageLength()}\r\n                </h2>\r\n                <div id = \"img_id\" className = \"img_class\"></div>\r\n                <div className = \"cards_footer\">\r\n\r\n                  <button  className=\"start_button\" onClick={() => this.change_card()}>START</button>\r\n                  <button  className=\"pause_button\" onClick={() => this.pauseTime()}>PAUSE</button>\r\n                  <button  className=\"reset_button\" onClick={() => this.resetCards()}>RESET</button>\r\n                </div>\r\n              </div>\r\n            );\r\n          }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}